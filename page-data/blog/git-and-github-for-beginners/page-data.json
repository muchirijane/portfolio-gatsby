{"componentChunkName":"component---src-templates-blog-js","path":"/blog/git-and-github-for-beginners","result":{"data":{"markdownRemark":{"frontmatter":{"title":" Git and Github for beginners"},"html":"<h4>What is Git</h4>\n<p>Git is a distributed version-control system for tracking changes in source code during software development.It is designed for coordinating work among programmers, but it can be used to track changes in any set of files.</p>\n<p>This basically means:</p>\n<ul>\n<li>It's a system that records changes to our files over time.</li>\n<li>You can recall and go back a specific version of that file at any time.</li>\n<li>Other developers can collaborate and have a local version of the files in their own computers.</li>\n</ul>\n<h4>Why use git ?</h4>\n<ul>\n<li>You can store revisions of your project in one directory.</li>\n<li>Easily go back to your revisions at anytime.</li>\n<li>Work on new features without messing up with the original codebase.</li>\n<li>Collaborate with other developers without a geographically constriction.</li>\n</ul>\n<h4>What is Github?</h4>\n<p>Github is an online service that you can host your project, share your code and helps other developers to download and work on it. Later they can upload their code edit and merge with main branch/codebase( master branch).</p>\n<h4>How to install Git</h4>\n<ul>\n<li>Go to the <a href=\"https://git-scm.com/\">Git website</a></li>\n<li>If you are using windows i would recommend <a href=\"https://cmder.net/\">Cmder</a>. It's a command line interface for windows. Download the full version that comes with git installed. (I have used it and it's absolutely worth it).</li>\n</ul>\n<h4>How set your username &#x26; email</h4>\n<p>Open your cdmer (I am going to use it as I work through this post)</p>\n<pre><code class=\"language-html\">git config --global user.name jane tracy\n</code></pre>\n<p>For setting up the email</p>\n<pre><code class=\"language-html\">git config --global user.email janetracy00@gmail.com\n</code></pre>\n<p>To see user details that you registered as</p>\n<pre><code class=\"language-html\">git config user.name git config user.email\n</code></pre>\n<h4>Basic command controls</h4>\n<ul>\n<li>To create a folder : mkdir test</li>\n<li>To create a file: touch index.html style.css app.js</li>\n<li>To delete a file : rm index.html</li>\n<li>To see inside a folder : ls (Ls)/ dir</li>\n<li>To move up a folder : cd ..</li>\n<li>To delete a folder : rmdir test</li>\n</ul>\n<h5>What is a Git repository (.git)</h5>\n<p>This is a folder inside your project where git tracks all the changes made in the files and build a history reference over time. In your project the git repository folder you will see a .git folder.\nNote: The git repository should be at the root of the project folder, for it to track changes to the whole project.</p>\n<pre><code class=\"language-html\">git init\n</code></pre>\n<h4>A work through the stages in git</h4>\n<p><img src=\"https://i.ibb.co/tX6CQMR/stages.png%22git%20staging%22\" alt=\"Project Image\"></p>\n<h4>1) git status</h4>\n<p>Running git status will show you which files are currently in the staging area.</p>\n<pre><code class=\"language-html\">git status\n</code></pre>\n<p>If the names of the files listed are in red that means they are not in the staging area. But if they are green, they are in the staging and are ready to commit.</p>\n<h4>2) git add</h4>\n<p>Running git add moves the file/files in the staging area. This helps you to review your changes before you commit.\nTo add a single file</p>\n<pre><code class=\"language-html\">git add index.html\n</code></pre>\n<p>To add multiple files</p>\n<pre><code class=\"language-html\">git add .\n</code></pre>\n<h4>3) git rm</h4>\n<p>This helps to unstage any file in the staging area.</p>\n<pre><code class=\"language-html\">git rm --cached index.html\n</code></pre>\n<h4>4) git commit</h4>\n<p>Running this will commit your files in the staging area. You can also add a descriptive message to the commit to help you when reviewing your project folder in the future.</p>\n<pre><code class=\"language-html\">git commit -m \"added index and styles file\"\n</code></pre>\n<h4>5) git log / git log --oneline</h4>\n<p>git log helps you to see the commit history. Each commit has a unique id, the author details, date, time and the commit message.</p>\n<pre><code class=\"language-html\">git log/ git log --oneline\n</code></pre>\n<p>git log --oneline show the shorter version(log in one line). It includes the id and the commit message.</p>\n<pre><code class=\"language-html\">## get commits by a specific author git log --author jane ## get commits by\nmessage ## get commit that contains 'index' git log --all --grep index ## get\ncommit in the last 2 weeks git log --since=2.weeks\n</code></pre>\n<h4>Undoing things</h4>\n<p><img src=\"https://i.ibb.co/6PBVxpH/undoing.png\" alt=\"git undoing image\"></p>\n<h4>6) git checkout commit</h4>\n<p>This helps you to go back to a previous commit. But any changes done will not be saved and the commit history won't be ruined. This is read only stage and this is why it's safer than revert or reset. If you want to create a new branch to retain commits you create, you can by using -c with the switch command.</p>\n<pre><code class=\"language-html\">git switch -c &#x3C;new-branch-name> ## undo this by: git switch -&#x3C;/new-branch-name>\n</code></pre>\n<h4>7) git revert</h4>\n<p>It inverts the changes introduced by the commit and creates a new commit with the inverse code.This is safer than using git reset plus it doesn't delete the commit permanently.</p>\n<h4>8) git reset</h4>\n<p>This doesn't delete a commit but the commit will not have a direct path from a ref to access them. It alters the commit history. This commits can be found and restored using <a href=\"https://www.atlassian.com/git/tutorials/rewriting-history/git-reflo\">git reflog</a>.</p>\n<pre><code class=\"language-html\">git checkout 91471e4 git revert 91471e4 git reset 91471e4 ## Any pending work\nthat was hanging out in the Staging Index and Working Directory will be lost.\ngit reset 91471e4 --hard ##The Staging Index is reset to the state of the\nspecified commit.Any changes that have been undone from the Staging Index are\nmoved to the Working Directory. git reset 91471e4 --mixed ##The ref pointers are\nupdated and the reset stops there. The Staging Index and the Working Directory\nare left untouched. git reset 91471e4 --soft\n</code></pre>\n<p>For more details about <a href=\"https://www.atlassian.com/git/tutorials/undoing-changes/git-reset\">git reset</a> and how it works.</p>\n<h4>9) git branch</h4>\n<p><img src=\"https://i.ibb.co/tXFpwjh/master-branch.png%22\" alt=\"git branch\">\nIf you have a new feature you want to try out instead of making commits to the master branch, you can create a new branch which copies the state of code in the master branch, then add new commits and finally merge it to the master branch at the end. If you are not happy with the new feature, you can just delete the branch and go back to the initial codebase.</p>\n<pre><code class=\"language-html\">##To create a branch git branch feature-1 ##To switch to a branch git checkout\nfeature-1 ## To create and switch to a branch git checkout -b feature-a ## To\npush a branch up on github git push origin feature-a ## To check the branches\ngit branch -a ## To delete a branch git branch -d feature-1 ## To forcefully\ndelete a branch even if it's unmerged git branch -D feature-1 ## To rename a\ncurrent branch ## Rename feature-1 to feature-a git branch -m feature-a\n</code></pre>\n<h4>10) git merge</h4>\n<p>It will combine multiple sequences of commits into one example you can use it to combine feature-1 to the master branch.</p>\n<pre><code class=\"language-html\">git merge feature-1\n</code></pre>\n<p>When you have a conflict it might be someone has changed code in the master branch when you were working on another branch. The merge can't happen until you solve the conflict and you can do it manually. Read more about <a href=\"https://www.atlassian.com/git/tutorials/using-branches/merge-conflicts\">git merge</a></p>\n<h2>How to create a repository in Github</h2>\n<h4>11) git push</h4>\n<h5>1) Method one</h5>\n<p>Let's say you have a project you have been coding and you want to publish it in github for collaboration or just hosting. You can go in github and create a new repository, copy the url of your repo and run:</p>\n<pre><code class=\"language-html\">## To push it into the master branch git push &#x3C;url link> master&#x3C;/url>\n</code></pre>\n<p>When you want to edit code and push it again to github. You can first create an alias for the remote repo by:</p>\n<pre><code class=\"language-html\">git remote add origin\n&#x3C;url>\n  git remote add origin https://github.com/muchirijane/git-learning.git ## To\n  push it into the master branch git push -U origin master&#x3C;/url\n>\n</code></pre>\n<h4>12) git clone</h4>\n<h5>2) Method Two</h5>\n<p>Create a repository in Github and clone it to your computer</p>\n<pre><code class=\"language-html\">git clone\n&#x3C;url>\n  ## you have a url repo git clone\n  https://github.com/muchirijane/git-learning.git ## To push it up in Github to\n  the master branch git push origin master ## To see urls of the remote\n  repositories git remote -v&#x3C;/url\n>\n</code></pre>\n<h2>Collaborating in Github</h2>\n<h4>13) git pull</h4>\n<h5>1) Step 1</h5>\n<p>This fetches and downloads code from the remote repo(github repo) and updates the local repository to match it.</p>\n<pre><code class=\"language-html\">git pull origin master\n</code></pre>\n<h5>2) step 2</h5>\n<p>Create a new branch, add your code and make commits</p>\n<pre><code class=\"language-html\">git checkout -b feature-2\n</code></pre>\n<h5>3) Step 3</h5>\n<p>Push your branch to github and create a pull request</p>\n<pre><code class=\"language-html\">git push origin feature-2\n</code></pre>\n<h2>Conclusion</h2>\n<p>Git is very useful and important to learn if you want to level up in the tech field. I haven't cover ever git or github command but this are the basics that can help you start. You can check tutorials in youtube to learn more. In future i will make part 2 with more advanced commands.\nIf you want to know how to create git aliases use this <a href=\"https://www.freecodecamp.org/news/an-intro-to-git-aliases-a-faster-way-of-working-with-git-b1eda81c7747/\">website</a>.</p>\n<h2>🔥 Bonus section</h2>\n<h4>Forking in Github</h4>\n<p>You can use this method to do your first open source project.\nLet's do an example by contributing to <a href=\"https://github.com/firstcontributions/first-contributions\">first contributions</a>.</p>\n<h5>1) Step one: Fork the github repository</h5>\n<p>This is done by clicking the fork button on top of the page. This will create a copy of the repository in your own Github account.\n<img src=\"https://i.ibb.co/tKKsG5p/Screenshot-156.png\" alt=\"forking image from github\"></p>\n<h5>2) Step two: Clone the project</h5>\n<p><img src=\"https://i.ibb.co/nRxH5yX/Screenshot-157.png\" alt=\"forking image from github\">\nClick on the clone button and the click on the copy to clipboard icon.\nThis will create a copy of the project files to your computer.\nPs: Your create an 'open source' folder where you want copy the project files.\nOpen your terminal or in my case cdmer and run</p>\n<pre><code class=\"language-html\">git clone\n&#x3C;url>\n  ## Let's get the url for contributions repo git clone\n  https://github.com/muchirijane/first-contributions.git&#x3C;/url\n>\n</code></pre>\n<h5>3) Run git status</h5>\n<p>Before you start coding run git status to make sure everything in the project files are update with the 'origin/master branch'</p>\n<pre><code class=\"language-html\">git status\n</code></pre>\n<h5>4) Create a new branch</h5>\n<p>In this open source for beginners your task is to add your name.\nThe branch name will include your name</p>\n<pre><code class=\"language-html\">git checkout -b\n&#x3C;add-your-name-in-the-branch>\n  ## My name to the branch git checkout -b\n  add-jane-tracy&#x3C;/add-your-name-in-the-branch\n>\n</code></pre>\n<h5>5) Make your contribution</h5>\n<p>For this case, you are required to add your name to the contribution.md file\nAfter that run git add, git commit and push your branch</p>\n<pre><code class=\"language-html\">git add . ## commit the changes git commit -m \"added jane muthoni to the\ncontributors list\" ## Let's push our branch git push origin\n&#x3C;branch-name-you-created>\n  git push origin add-jane-muthoni&#x3C;/branch-name-you-created\n>\n</code></pre>\n<h5>6) Compare and Pull request</h5>\n<p>Nope! you are not done yet, one more step.\nTo contribute your code to the origin repository.\nClick compare and pull request\n<img src=\"https://i.ibb.co/RcQGR20/Screenshot-158.png\" alt=\"open source contribution on github\"></p>\n<h5>7) Create a new pull request</h5>\n<p><img src=\"https://i.ibb.co/fNVK0Tz/Screenshot-159.png\" alt=\"open source contribution on github\">\nYou can leave a comment if you want to and click create pull request button.</p>\n<h2>👩‍💻💃 Congratulation on your first open source contribution</h2>\n<p>If you have done the above steps your branch will be merged to the master branch by the original owner of the Github repository.\n<img src=\"https://i.ibb.co/6yCY4Nr/Screenshot-160.png\" alt=\"open source contribution on github\"></p>\n<p>I so proud of you. This is just the first step. Use <a href=\"https://github.com/firstcontributions/first-contributions\">first contributions</a> to make your first pull request and checkout this <a href=\"https://firstcontributions.github.io/#project-list\">list</a> for more projects.\nLet's connect with <a href=\"https://github.com/muchirijane\">my Github</a> too.</p>\n<p>You can also support me, if this article helped you. 🙂</p>\n<p><a href=\"https://www.buymeacoffee.com/janetracy\" target=\"_blank\"><img src=\"https://cdn.buymeacoffee.com/buttons/v2/default-green.png\" alt=\"Buy Me A Coffee\" height=\"41\" width=\"174\" loading=\"lazy\"></a></p>"}},"pageContext":{"slug":"git-and-github-for-beginners"}},"staticQueryHashes":["4013800979"]}